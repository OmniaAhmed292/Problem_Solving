//https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses
//Stack solution
 public String minRemoveToMakeValid(String s) {
        Stack<Integer> stack = new Stack<>();
        Set<Integer> set = new HashSet<>();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '('){
                stack.push(i);
            }else if(s.charAt(i) == ')'){
                if(stack.isEmpty()){
                    set.add(i);
                }else{
                    stack.pop();
                }
            }
        }
        while(!stack.isEmpty()){
            set.add(stack.pop());
        }
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            if(!set.contains(i)){
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }

//Only counters solution
public String minRemoveToMakeValid(String s) {
        int openCount= 0;
        int closeCount = 0;
        StringBuilder sb = new StringBuilder();
        for(char c : s.toCharArray()){
            if(c == '('){
                openCount++;
            }else if(c == ')'){
                if(openCount == 0){
                    continue;
                }
                openCount--;
            }
            sb.append(c);
        }
        StringBuilder result = new StringBuilder();
        for(int i = sb.length() - 1; i >= 0; i--){
            if(sb.charAt(i) == '(' && closeCount < openCount){
                closeCount++;
                continue;
            }
            result.append(sb.charAt(i));
        }
        return result.reverse().toString();

    }
